#+TITLE: Modelování a simulace
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
* Úvod
** Základní pojmy
*** Systém
Je soubor elementárních částí, které mají mezi sebou určíté vazby.
*** Model
Napodobenina systému jiným systémem
*** Modelování
Vyrváření modelů systémů
*** Simulace
Získávání nových znalostí o systémz experimentováním s jeho modelech

** Základní etapy modelování a simulace
1. Vytvoření abstraktního modelu
2. Vytvoření simulačního modelu
3. Verifikace a validace
4. Simulace
5. Analýza a interpretace výsledků

** Formální definice systému
Systém $S$ je dvojice
\[S = (U, R)\]

kde:
*** $U$ je konečná množina prvků systému:
\[U = \{u_1, u_2, \dots, u_N\}\]

*** Prvek systému $u = (X, Y)$:
**** $X$ je množina všech vstupních proměnných
**** $Y$ je množina všech výstupních proměnných

*** Charakteristika systému $R$ je množina všech propojení
\[R = \bigcup^{N}_{i,j=1} R_{ij}\]

*** Propojení prvku $u_i$ s prvkem $u_j$:
\[R_{ij} \subseteq Y_i \times X_j\]

** Čas
Rozlišujeme tři typy času:
1. Reálný času
   Probíháý skutečný děj v reálném systému
2. Modelový čas
   Časová osa modelu, nemusí být synchronní s reálným časem
3. Strojový čas
   Čas spotřebovaný na výpočet programu

** Časová množina
Množina všech časových okamžiků, ve kterých jsou definovány hodnoty vstupních,
stavových a výstupních proměnných prvku systému

Může být diskrétní nebo spojitá[fn:continuous]

** Chování systému
Každému časovému průběhu vstupu přiřazuje časový průběh výstupu. Lze definovat
jako zobrazení.

Systémy považujeme za systémy se stejným chováním, vyvolají-li stejné podněty u
obou systémů stejné reakce.

Izomorfní systémy jsou systémy, kde prvky systémů navzájem můžeme přiřadit 1:1.

Homomorfní systémy jsou systémy, kde prvky systémů navzájem můžeme přiřadit N:1,
ale ne naopak.

** Okolí systému
Okolí systému zahrnuje vše, co má vliv na chování systému, ale není jeho
součástí.

Systémy můžeme rozdělit na uzavřené (nekomunikují s okolím nebo jej zanedbábají)
a otevřene (mají definované vstupy a výstupy).

** Klasifikace prvků systémů
*** Klasifikace 1
Prvky se spojitým chováním vs prvky s diskrétním chováním
*** Klasifikace 2
Prvky s deterministickým chováním vs prvky s nedeterministickým chováním

** Klasifikace systémů
Typ systému závisí na typu jeho prvků
*** Klasifikace 1
Spojité, Diskrétní, Kombinované
*** Klasifikace 2
Deterministické, nedeterministické

** Simulace
Cílem simulace je získat nové informace o chování systému v závislosti na
vstupních veličinách a na hodnotách parametrů.

Opakovaně vyhodnocujeme model, tak dlouho, dokud nezískáme dostatek informací o
chování systému nebo dokud nenalezneme takové hodnoty parametrů, pro něž má
systém žádané chování.

** Typy simulace podle modelu
Spojitá, diskrétní, kombinovaná. Kvalitativní, kvantitativní.

** Typy simulace podle simulátoru
Na počítači, real-time, paralelní a distribuovaná

** Verifikace modelu
Měla by předcházet simulaci. Ověťujeme, zda simulační model odpovídá 1:1
(izomorfně) abstraktnímu modelu.

** Validace modelu
Jedná se o jeden z nejobtížnějších problémů modelování. Vyžaduje neustálou
konfrontaci informací a modelovaném systému a dat ze simulovaného systému.

Nelze absolutně dokázat přesnost modelu. Pokud chování modelu neodpovídá
předpokládanému chování systému, musíme model modifikovat.

* Modely
** Abstraktní model
Nepostihuje reálný svět v celé komplikovanosti. Zajímá se jen o ohraničené,
vhodně zvolené části. Identifikuje vhodné sloky systému.

Pro sestavení abstraktního modelu potřebujeme studovat systém pro určitá
kritéria a závislosti, predikovat chování systému za určirých podmínek,
analyzovat faktory, které jsou pro činnost systému nejvýznamnější a nalézt
takové kombinace parametrů, které vedou k nejlepší odezvě systému.

** Simulační model
Jedná se o abstraktní model zapsaný formou programu v nějakém programovacím
jazyce.

** Konceptuální modely
Jejich komponenty zatím nebyly přesně popsány. Používají se v počáteční fázi
modelování pro ujasnění souvislostí a komunikaci v týmu.

Má formu textu nebo obrázků.

** Deklarativní modely
Popisuje přechody mezi stavy systému.

Je definován stavy a událostmi, které způsobí přechod z jednoho stavu do
druhého.

Je vhodný především pro diskrétní modely.

Například konečné automaty, petriho sítě.

** Funkcionální modely
Grafy zobrazující funkce a proměnné. Uzel grafu je funkce nebo proměnná.

Například systémy hromadné obsluhy, bloková schemata, grafy signálových toků.

** Modely popsané rovnicemi
Používají se algebraické, diferenciální, diferenční rovnice.

Mívají podobu neorientovaných grafů.

Například elektrická schemata, systémy dravec kořist, kyvadla, logistické
systémy, chaos.

** Prostorové modely
Rozdělují systém na prostorově menší ohraničené podsystémy.

Například parciální diferenciální rovnice difuze nebo proudění, celulární
automaty, mechanické modely těles.

** Multimodely
Složeny z různých typů modelů, obvykle heterogenních.

Například kombinované modely, fuzzy modely, propojené simulační systémy.
* Simulační nástroje
Mohou používat klasické programovací jazyky samy o sobě, nebo s využitím
knihoven. Existují specializované simulační jazyky (Simula67, Modellica...)

** Simulační jazyky
Poskytují prostředky usnadňující efektivní popis struktury a chování modelů a
také popis simulačních experimentů.

Výhodou je jednodušší popis modelu a možnost automatické kontroly popisu modelu.

Nevýhodami jsou náklady na vytvoření překladače, údržbu, výuku...

Celkově nejsou příliš používány.

* Modelování náhodných procesů
** Náhodná proměnná
Náhodná proměnná je taková veličina, která jako výsledek pokusů může nabýt
nějakou hodnotu, přičemž předem nevíme jakou.

Rozlišujeme diskrétní a spojité

Náhodné veličiny můžeme zadat distribuční funkcí nebo rozdělením
pravděpodobnosti.

** Diskrétní rozdělení pravděpodobnosti
Určuje vztah mezi možnými hodnotami náhodné veličiny $x_i$ a jim příslušejícími
pravděpodobnostmi $p_i = P(X = x_i)$.

Obecně platí vztah:
\begin{equation}
    \sum_{i=1}^\infty p_i = 1
\end{equation}

Lze definovat například tabulkou pravděpodobnosti pro všechny možné hodnoty
náhodné proměnné, suma všech pravděpodobností musí být 1.

** Diskrétní distribuční funkce
Distribuční funkce náhodné veličiny $X$ je funkce:
\begin{equation}
    F(x) = P(X \leq x)
\end{equation}

Kde $P(X \leq x) je pravděpodobnost toho, že náhodná veličina X nabude hodnoty
menší nebo rovnu zvolenému x.

Platí vztah:
\begin{equation}
    F(x) = \sum_{x_i \leq x} p_i
\end{equation}

Kraf distribuční funkce pro diskrétní náhodné proměnné je po částech konstantní.

** Distribuční funkce spojité náhodné proměnné
\begin{equation}
    F(x) = P(X \leq x) = \int_{-\infty}^x f(x) dx
\end{equation}

Distribuční fuknce je neklasající. Roste od 0 do \infty

Pravděpodobnost hodnoty $x$ pro $a \leq x$ a $x \leq b$ je rozdíl hodnot
distribuční funkce v bodech $b$ a $a$. Vyjádřeno vzorcem:
\begin{equation}
    P(a \leq X \leq b) = F(b) - F(a)
\end{equation}

** Hustota pravděpodobnosti spojité náhodné proměnné
+ Vždy větší než 0
+ Vyjádřena jako derivace distribuční funkce
+ Integrál funkce hustoty pravděpodobnosti je vždy 1
+ Hodnota pravděpodobnosti pro $x$ mezi $a$ a $b$ je dána jako intergrál hustota
  pravděpodobnosti mezi $a$ a $b$

** Poissonovo rozložení
Diskrétní rozložení udávající počet nějakých událostí za jednotku času. Vzorec:
\begin{equation}
p_i = \frac{\lambda^i}{i!} e^{-\lambda}, \lambda > 0, i \in {0, 1, 2,\dots}
\end{equation}
Kde $E(x) = \lambda, D(x) = \lambda$

** Rovnoměrné rozložení
Označujeme $R(a, b)$

Hodnota distribuční funkce lineárně roste mezi body $a$ a $b$. Hodnota funkce
hustoty pravděpodobnosti je konstatní.

** Exponenciální rozložení
Používá se pro dobu mezi dvěma událostmí.
* Diskrétní simulace
** Úvod
Diskrétní systém můžeme popsat:
+ Programem v programovacím jazyce
+ Petriho sítí
+ Automaty nebo sítěmi automatů
+ Procesními algebrami
+ \dots

** Procesy
Proces je posloupnost událostí. Pokud jsou procesy prováděny současně, nazýváme
je paralelní. Pokud paralelní procesy provádíme na jednoprocesorovém počítači,
jedná se o kvaziparalelní procesy.

V modelovaných systémech často existuje mnoho paralelně probíhajících a vzájemně
komunikujících procesů.

*** Paralelismus
Pro zajištění paralelismu je třeba popsat jednotlivé procesy sekvencí kroků
(napsat program). Dále je nutné popsat komunikace procesů -- zprávy. Rovněž je
nutné vyřešit synchronizace při používání sdílených prostředků.

** Petriho sítě
Definice Petriho sítě:

\begin{equation}
    \Sigma = (P, T, F, W, C, M_0)
\end{equation}

Kde:
+ $P$ je množina míst (stavů)
+ $T$ je množina přechodů, $P \cap T = \emptyset$
+ Incidenční relace $F \subseteq (P \times T) \cup (T \times P)$
+ Váhová funkce $W : F \rightarrow \{1, 2, \dots\}$
+ Kapacity míst $C : P \rightarrow N$
+ Počáteční značení $M_0 : P \rightarrow N$

Petriho sítě obvykle zadáváme formou grafu, kde:
+ Místa = Kružnice
+ Přechody = Obdélníky
+ Incidenční relace = Šipky
+ Váhová funkce = ohodnocení hran

** Systémy hromadné obsluhy
SHO (Queueing systems) jsou systémy obsahující zařízení s frontami, která
poskytují obsluhu transakcím.

Typický systém hromadné obsluhy obsahuje:
+ Transakce (procesy) a popis jejich příchodů
+ Obslužné linky a popis jejich obsluhy
+ Fronty různých typů, ve kterých transakce čekají

Při simulaci sledujeme informace o čase stráveném v systému pro konkrétní
transakci, doby čekání ve frontách, vytížení obslužných linek. Cílem je odhalit
zdržení, optimalizovat výkon \dots

*** Vstupní tok požadavků
Obvykle se jedná o proces příchodů do systému. Zadáváme buď střední dobu mezi
příchody (exponenciální rozdělení) nebo počet příchodů za jednotku času
(Poissonovo rozdělení).

*** Fronty čekajících požadavků
Vytvoří se, když požadavek chce být obsloužen již obsazeným zařízením. Pro
fronty jsou typické:
+ Způsob řazení požadavků (FIFO, LIFO, \dots)
+ Způsob výběru požadavků z fronty
+ Největší možná délka fronty

Definujeme pojmy:
+ Nulová fronta - Požadavek nesmí vstoupit do fronty, jedná se o systém se ztrátami
+ Konečná fronta - Omezuje kapacitu fronty
+ Fronta s netrpělivými požadavky - Netrpělivý požadavek opouští systém,
  dojde-li k timeoutu.

*** Prioritní fronty, priorita obsluhy
U jedné obslužné linky může být více front s různými prioritami, prioritních
úrovní může být více. Přicházející požadavky nejsou rovnocenné.

Při příchodu požadavku s vyšší prioritou se stane jedna ze 4 věcí:
1. Započatá obsluha se ukončí
2. Obsluha se přeruší a začne obsluha požadavku s vyšší prioritou. Požadavek,
   jehož obsluha je přerušena buď opouští systém neobsloužen nebo se znovu vrací
   do fronty a je obsloužen později.
3. Jsou-li všechny linky obsazeny a u každé je fronta, požadavek se sám
   rozhodne, do které se zařadí.
4. Vytvářejí-li požadavky jednu společnou frontu, požadavek vstupuje do té
   linky, která se nejdříve uvolní.

*** Obslužná síť
Vzniká spojením několika obslužných linek. Může být:
+ Otevřená -- Výměna požadavků mezi sítí a okolím
+ Uzavřená -- Nedochází k výměně požadavků s okolím
+ Smíšená -- Pro některé typy požadavků je otevřená, pro jiné uzavřená

Statické vlastnosi obslužné sítě jsou definovány počtem a charakteristikou
obslužných linek a topologií obslužné sítě.

Dynamické vlastnosti jsou definovány charakteristikami procesů příchodů,
obsluhy, přechodu mezi linkami a strategií obsluhy požadavků v obslužných
linkách.

*** Klasifikace SHO
Standard stučného a přehledného vyjádření typu SHO používá tři hlavní hlediska:
+ X - Typ procesu popisujícího příchod požadavků k obsluze
+ Y - Zákon rozložení délky obsluhy
+ c - Počet dostupných obslužných linek.

Například systém M/M/1 značí Poissonovo rozložení příchodu požadavků,
exponenciální dobu obsluhy a 1 obslužnou linku.

*** Modelování SHO
Popisujeme procesy v systému, stav obslužných linek a front a průběh obsluhy
transakcí v zařízeních.

Podle kapacity linek rozlišujeme:
+ Zařízení -- kapacita 1
+ Sklady -- kapacita > 1

Modelujeme-li více zařízení stejného typu, pak každé zařízení má vlastní frontu,
nebo k zařízením vede jedna fronta.
** SIMLIB

* Spojitá simulace
** Úvod
** Numerické metody
** SIMLIB

* Kombinovaná simulace
** Úvod
** SIMLIB

* Footnotes

[fn:continuous] Na číslicovém počítači se vždy diskretizuje
