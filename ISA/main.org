#+TITLE: Síťové aplikace a správa sítí
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* Architektura sítí
Vrstvový model definuje síťové vrstvy.
Každá vrstva určuje obecné funkce poskytované vyšším vrstvám.
Funkce dané vrstvy jsou implementovány příslušnými protokoly dané vrstvy.
Pro služby vyšší vrstvy je činnost nižších vrstev transparentní.

Při komunikaci na vrstvách komunikující koncové body leží vždy ve stejné vrstvě
a pro komunikaci se využívá služeb nižších vrstev.

Procesy aplikační vrstvy komunikují pomocí socketů (schránek). Ty jsou
identifikovány IP adresou a číslem portu.


** Model OSI
Model OSI definuje 7 vrstev:

1. Fyzická vrstva
2. Linková vrstva
3. Síťová vrstva
4. Transportní vrstva
5. Vrstva sezení
6. Prezentační vrstva
7. Aplikační vrstva

** Model IEEE
Model IEEE definuje 2 vrstvy:

1. MAC vrstva
2. LLC vrstva

** Model TCP/IP
Definuje 4 vrstvy:

1. Vrstva síťového rozhraní (fyzická a linková vrstva dle OSI)
2. Internetová vrstva (síťová vrstva dle OSI)
3. Transportní vrstva
4. Aplikační vrstva

* Adresování
** Adresa
Adresa je způsob identifikace adresáta pomocí jednoznačné informace

** Adresování a směrování v modelu TCP/IP
Každá vrstva modelu TCP/IP definuje svoje adresování a zajišťuje určitou formu
směrování. Některé služby používají mapování adres mezi vrstvami.

** Adresování a směrování na fyzickém rozhraní (L2)
Adresuje se konkrétní síťové rozhraní počítače. To je identifikováno 48bitovou
fyzickou adresou. Ta určuje adresování v lokální síti. Prvních 24 bitů je OUI
(Organizational Unique Identifier), zbylých 24 bitů je číslo síťového rozhraní
přiděleného výrobcem karty. L2 rámec obsahuje:
+ 7+1B preambule (synchronizace + typ)
+ 48b source address
+ 48b destination address
+ 16b ethertype
+ ... data ... (max 1500 B)
+ 32b checksum

*** Speciální adresy L2 vrstvy
+ Broadcast: ~FF FF FF FF FF FF~
+ IPv4 multicast ~01 00 5e xx xx xx~
+ IPv6 multicast ~33 33 xx xx xx xx~

** Adresování a směrování na síťové (IP) vrstvě
Používá se 32bitová IPv4 adresa nebo 128bitová IPv6 adresa. IP adresa
jednoznačně identifikuje síťové rozhraní počítače v síti. Je určena pro
adresování i mimo lokální síť.

IPv4 se může adresovat s využitím tříd (A, B, C, D, E). Používá se ~netid +
hostid~. Délku části ~netid~ určuje pevná nebo proměnná maska.

Při použití variabilní délky masky se prostor IPv4 adres dá efektivněji využít,
vytváří se podsítě (subnetting). Používá se beztřídní směrování.

*** Přidělování adres
Přidělení IP adres může být provedeno buď manuálně v operačním systému nebo
dynamicky pomocí DHCP.

Pro IPv4 se používá protokol DHCPv4. Nové zařízení vyhledává DHCP server na
lokální síti pomocí broadcastu.

Pro IPv6 se používá více způsobů přidělování adres. Typ přidělení oznamuje
směrovač zprávou ICMPv6 RA. Typ konfigurace může být:

1. Bezstavová konfigurace pomocí SLAAC (Stateless Autoconfiguration)
2. Bezstavová konfigurace pomocí SLAAC a DHCPv6
3. Stavová konfigurace pomocí DHCPv6

** Adresování a směrování na transportní vrstvě
Adresuje je konkrétní služba pomocí 16b čísla portu (uvedena v ~/etc/services~).
Číslo portu jednoznačně identifiuje službu na daném počítači. Rozlišujeme
spojované (TCP) a nespojované (UDP) služby.

** Adresování na aplikační vrstvě
Je závislé na konkrétní aplikaci. Příklady:
+ Elektronická pošta: xlogin00@stud.fit.vutbr.cz
+ DNS: eva.fit.vutbr.cz
+ WWW: http://www.fit.vutbr.cz/index.html
+ IP telefonie: sip:login@cesnet.cz
+ SNMP: 1.3.6.1.2.1.2.1 (ifNumber)
+ LDAP: cn=login, ou=Students, dc=vutbr, dc=cz
+ FTP: /public/index.txt

* Základní nástroje pro konfiguraci
** Výpis aktuálního síťového nastavení
+ ~ifconfig~, ~ip link~, ~ip address~ (Linux)
+ ~ipconfig~ (Windows)

** Testování základní konektivity
+ ~ping~, ~pathping~

** Kontrola směrování
+ ~netstat -r~, ~ip route~ : Vypíše směrovací tabulku
+ ~arp -a~, ~ip neigh~ : Vypíše tabulku ARP, respektive Neighbour Cache

** Testování dosažitelnosti vzdáleného počítače
+ ~tracert~, ~traceroute~, ~tcptraceroute~

** Testování dostupnosti služeb
+ ~telnet <addr> <port>~

** Výpis otevřených spojení
+ ~sockstat~ (FreeBSD)
+ ~netstat -natu~ (Linux)
+ ~netstat -a~ (Windows)

** Sledování komunikace na síťovém rozhraní
+ ~tcpdump~
+ ~tshark~
+ Wireshark (GUI1)
* Programování sítí TCP/IP
** Komunikace klient -- server
Jedná se o standardní schema komunikace mezi dvěma procesy. Komunikace je
popsána protokolem. Klient posílá požadavky na zpracování serveru, ten je
zpracuje a pošle odpověď. Komunikace je obvykle zahájena klientem.

Protokol je soubor syntaktických a sématnických pravidel určujících výměnu dat.
Popisuje vytvoření spojení, adresování, přenos dat, řízení toku, zabezpečení.
Formálně je protokol specifikován stavovými automaty, gramatikami, formálními
jazyky, Petriho sítěmi, diagramy posloupnosti zpráv nebo algebraickými
prostředky.

** Prostředky pro meziprocesovou komunikaci
Unixové roury, Unix to Unix copy, Remote Procedure Call, BSD sockets, Winsock.

** Sockety
Aplikační programové rozhraní pro komunikující procesy. Definují konečný
komunikační bod. Implementovány jako abstraktní datové struktury obsahující
údaje pro komunikaci. Jsou jednoznačně implementovány v síti pomocí IP adresy a
čísla portu. Jsou implementovány ve většině programovacích jazyků.

Vytvářejí rozhraní na vrstvě L4 (transportní). Rozlišujeme několik typů
schránek. Základní typy jsou:

1. ~SOCK_STREAM~ (TCP komunikace)
2. ~SOCK_DGRAM~ (UDP datagramy)
3. ~SOCK_RAW~ (Holá schránka bez žádného protokolu. Nutno vyplnit všechny
   hlavičky ručně)

*** Funkce v BSD socketech pro vytvoření konkurentního serveru TCP
1. ~socket()~ -- Vytvoří schránku
2. ~bind()~ -- Připojení schránky na lokální port
3. ~listen()~ -- Vytrvoření fronty příchozích požadavků
4. ~accept()~ -- Přijímání požadavků
5. ~fork()~ -- Vytvoření synovského procesu
6. ~read(), write()~ -- Výměna dat v rámci synovského procesu
7. ~close()~ -- Zavření schránky synovského procesu
8. ~exit()~ -- Ukončení synovského procesu
9. ~close()~ -- Uzavření schránky rodičovského procesu

*** UDP schránky
Když neběží UDP server, klient pošle zprávu pomocí ~sendto()~, čeká na odpověď
pomocí ~recvfrom()~. Dojde ale k uváznutí, protože UDP neposkytuje možnosti, jak
oznámit nedostupný port. Možná řešení jsou použití timeoutu nebo spojovaných UDP
schránek.

Spojované UDP schránky používají funkci ~connect()~, nedochází ale k vytvoření
TCP spojení, pouze se zpracovávají chyby. Funkce ~connect()~ zjistí aktuální
stav serveru, v budoucnu však může dojít k ukončení činnosti UDP serveru a
klient to nezjístí. Funkce ~connect()~ se tak může volat opakovaně.
* Komunikace typu multicast
Jeden paket doručen skupině  uzlů v multicastové skupině. Používá se jedna
cílová adresa typu multicast. Pro IPv4 tato adresa náleží do třídy D, tedy
rozsah ~22.0.0.0~ -- ~239.255.255.255~. Pro IPv6 se jedná o adresy s prefixem
~0xFF00::/8~.

Multicastová komunikace umožňuje dynamické připojování uzlů do multicastové
skupiny, speciální směrování multicastových adres a řízení dosahu multicastového
vysílání.

Pro výpis aktivních multicastových skupin existují příkazy:
+ ~ifmcstat~ (FreeBSD)
+ ~netstat -g~, ~netstat -gn~ (Linux)
+ ~netsh interface ip show joins~ (Windows)

Směrování IP multicastu je implementováno pomocí protokolů DVMRP, PIM, MOSPF.
Připojování uzlů do multicastových skupin probíhá pomocí protokolů IGMPv2,
IGMPv3, MLD.

** Mapování multicastové adresy IPv4 na MAC adresu
Prefix multicastové MAC adresy je ~0x01 01 5e~. Z multicastové adresy se použije
jen posledních 23b  do multicastové MAC adresy. Může docházet k překrývání
adres.

** Mapování multicastové adresy IPv6 na MAC adresu
Nejnižších 32b IPv6 adresy je zkopírováno do MAC adresy, prefix multicastové
adresy MAC je ~0x33 33~.

** Vlastnosti multicastové komunikace
Posílá pouze UDP pakety, negarantuje spolehlivé doručení, zachování pořadí...
Multicastová adresa identifikuje skupinu síťových rozhraní. Členství ve skupině
je dynamické. Počítače se připojují a odpojují.

** Multicast a sockety
Podporované schránky jsou třídy ~AF_INET~ nebo ~AF_INET6~, typu ~SOCK_DGRAM~
nebo ~SOCK_RAW~. Multicastové datagramy mají implicitní TTL nastavenu na 1. Pro
vynucení multicastu na socketu se využívá funkce ~setsockopt()~. Konkrétně se
jedná o parametry ~IP_MULTICAST_IF~, ~IP_MULTICAST_TTL~, ~IP_MULTICAST_LOOP~.

Na straně klienta je třeba inicializovat rozhraní pro multicast pomocí naplnění
struktury ~struct ip_mreq~. Následně je možné se připojit do multicastové
skupiny voláním funkce ~setsockopt()~ s parametrem ~IP_ADD_MEMBERSHIP~ a
předáním vytvořené struktury. Pro odpojení od multicastové skupiny se používá
parametr ~IP_DROP_MEMBERSHIP~.

* Analýza paketů na linkové vrstvě
Zahrnuje zachycení paketů z přenosového média, převod binárních dat do
srozumitelné formy, rekonstrukci paketů, analýzu paketů, přenosů a konverzací.

** Nástroje pro zpracování paketů na linkové vrstvě
+ Paketový filtr BPF (BSD Packet Filter)
+ Linuxová implementace schránekt typu ~SOCK_PACKET~, ~PF_PACKET~.
+ Knihovna ~libpcap~
+ Knihovna ~scapy~ pro Python.

Tyto nástroje zajišťují přímý přístup k paketům na síťovém rozhraní. Aplikace
běží jako uživatelský proces mimo jádro systému v privilegovaném režimu. Pracuje
pouze s kopií paketu

** BSD Packet Filter
Řadič síťové karty zavolá BPF pokaždé, když je paket přijat nebo odeslán.
Aplikace nad BPF může filtrovat příchozí pakety, ty jsou uloženy v BPF bufferu.
Když je buffer plný nebo vyprší časovač, data jsou předána aplikaci.

** Knihovna ~libpcap~
Vytváří API pro zachytávání dat na síťpvém rozhraní. Čte data ze síťového
rozhraní nebo ze souboru ve formátu PCAP. Implementuje funkce pro zpracování
rámců a jejich analýzu. Původně určena pro jazyk C/C++, následně vytvořeny
wrappery pro další jazyky.

Čtení dat probíhá v následující posloupnosti:
1. Připojení k síťovému rozhraní ~pcap_lookupdev()~.
2. Otevření rozhraní pro čtení ~pcap_open_live()~, ~pcap_open_offline()~ (pro PCAP)
3. Čtení paketů ~pcap_dispatch()~, ~pcap_loop()~, ~pcap_next()~
4. Analýzu paketů provádí aplikace.


* Zabezpečení počítačových sítí
V počítačových sítích existují rizika:
+ Odposlech přenášených dat
+ Neautorizovaný přístup k zařízením
+ Podvržení zprávy
+ Falšování identity
+ Útok na systém (DoS)
+ Škodlivý software

Exisutjí požadavky na bezpečnost:
+ Důvěrnost
+ Autentizace
+ Integrita dat
+ Neodmítnutelnost
+ Dostupnost, kontrola přístupu

* Symetrické šifrování s tajným klíčem
Slouží pro zajištění důvěrnosti. Pro šifrování a dešifrování se používá stejný
klíč. Doporučená délka klíče je 112 -- 256 bitů.

** Rovnice pro symetrické šifrování
Pro šifrování platí vztah:

\begin{equation}
E_k(M) = C
\end{equation}

Kde $E_k$ je šifrovací funkce s klíčem $K$, $M$ je vstupní zpráva.

Pro dešifrování platí vztah:

\begin{equation}
D_k(C) = M
\end{equation}

Kde $D_k$ je dešifrovací funkce s klíčem $K$.

** Bezpečnost symetrického šifrování
Bezpečnost symetrického šifrování spočívá v klíči, nikoliv v principu algoritmu
(ten je většinou zveřejněný). Šifrují se buď jednotlivé bity zprávy (proudová
šifra) nebo sekvence bitů o pevné velikosti (bloková šifra).

** Výhody a nevýhody
Symetrické šifrování má problém s nutností distribuce klíčů a rozšiřitelností.
Naopak výhodou je rychlý výpočet.

** Příklady symetrických šifrovacích algoritmů
*** Blokové
+ DES
+ 3DES
+ AES
+ IDEA
+ RC2/4/5/6
+ Blowfish

*** Proudové
+ DES
+ 3DES
+ RC4
+ SEAL

** Nástroje pro symetrické šifrování
Nejpoužívanější je nástroj ~openssl enc~. Obsahuje sadu šifrovacích a
dešifrovacích algoritmů.

* Asymetrické šifrování s veřejným klíčem
Slouží pro zajištění důvěrnosti a autentizaci.

** Princip
Příjemce vygeneruje dva klíče:
1. Veřejný klíč $KB_{pub}$ pro šifrování
2. Soukromý klíč $KB_{sec}$ pro dešifrování

Klíč pro šifrování se liší od klíče pro dešifrování. Doporučená dékla klíče je
2048 -- 4096 bitů. Soukromý klíč se nedá odvodit z veřejného.

** Rovnice pro asymetrické šifrování
*** Šifrování
\begin{equation}
E_{KB_{pub}}(M) = C
\end{equation}

Může provést kdokoliv veřejným klíčem příjemce.

*** Dešifrování
\begin{equation}
D_{KB_{sec}}(C) = M
\end{equation}

Může provést pouze příjemce svým soukromým klíčem.

** Výhody a nevýhody
Snadná rozšiřitelnost, protože veřejný klíč lze vystavit veřejně. Náročné na
výpočet kvůli použití dlouhého klíče. Problém s ověřením pravosti veřejného
klíče, vyžaduje certifikační autoritu.

** Příklady asymetrických šifrovacích algoritmů
+ RSA
+ ElGamal
+ Eliptic curve
+ Diffie-Hellman

** Nástroje pro asymetrické šifrování
Používají se nástroje ~openssl genpkey~, ~openssl pkeyutl~, ~opoenssl rsa~.
Soukromé klíče je možné ochránit symetrickou šifrou proti zneužití.

* Zajíštění integrity dat pomocí kryptografického hashe
Zajišťuje integritu zprávy pomocí tajného klíče. Využívá kryptografickou
hashovací funkci, např. MD4/5/6, SHA1/2/3. Ta vytvoří kryptografický hash MAC
(Message Authentication Code) o pevné délce. Mechanismus HMAC přidává navíc do
výpočtu tajný klíč.

V počítačových sítích se používá hashování pro autentizaci směrovacích zpráv,
při použití TLS, PGP, SSH, IPSec nebo pro autentizaci zpráv SMMPv3.

** Nástroje pro hashování
+ ~md5~
+ ~sha1~
+ ~sha256~
+ ~sha384~
+ ~sha512~
+ ~shasum~
+ ~openssl dgst~

* Elektronický podpis
Využívá asymetrické kryprografie pro ověření odesilatele pomocí jeho soukromého
klíče.

** Princip a rovnice
Odesilatel A si vygeneruje dvojici klíčů $KA_{sec}$ a $KA_{pub}$.

*** Podepsání

\begin{equation}
E_{KA_{sec}}(MD) = DS
\end{equation}

Kde $E$ je šifrovací funkce, $MD$ (Message Digest) je hash dokumentu a $DS$ je
elektronický podpis.

*** Ověření podpisu
Příjemce vypočítá hash dokumentu $MD'$ a porovná s dešifrovaným podpisem:

\begin{equation}
E_{KA_{pub}}(DS) = MD
\end{equation}

** Příklady algoritmů
+ RSA
+ DSA
+ Elliptic Curve DSA

** Používání elektronického podpisu
Pro používání elektronických podpisů je zřízen systém /Public Key
Infrastructure/, což je systém certifikačních autorit pro správu, uložení a
ověření veřejných klíčů. CA generuje, podepisuje, ukládá a ověřuje certifikáty k
veřejným klíčům. Ověřuje identitu uživatelů, aplikací nebo organizací a vytváří
vazbu s veřejným klíčem.

* Digitální certifikát X.509
Dokument ověřující platnost pravého veřejného klíče a příslušnost k danému
uživateli. Certifikát vydává a ověřuje certifikační autorita. Pro ověření
podpisu CA se používá certifikát kořenové CA. K ověření slouží protokol OSCP
(Online Certificate Status Protocol).

** Obsah certifikátu X.509
+ Sériové číslo
+ Identifikace vydavatele (Distinguished Name: DN)
+ Datum platnosti
+ Identifikace majitele (DN)
+ Veřejný klíč majitele
+ Účel veřejného klíče (šifrování, ověřování podpisů)
+ Podpis certifikátu podepsaný soukromým klíčem CA
+ Algoritmus pro vytvoření podpisu
+ Otisk certifikátu (hash)
+ Algoritmus pro vytvoření hashe
+ Odkaz na seznam revokovaných certifikátů (CRL)

** Použití digitálních certifikátů
+ Bezpečný transport SSL/TLS
+ Zapezpečení IPSec
+ HTTPS
+ S/MIME
+ Autentizace uživatelů pomocí 802.1x

* Diffie-Hellman
Asymetrický algoritmus pro vytvoření sdíleného tajného klíče přes nezabezpečený
kanál založený na umocňování čísel, kde $(A^B)^C = (A^C)^B$. Nevyžaduje
šifrování.

** Postup
1. Uzly A a B se veřejně dohodnou na použitém modulu $m$ a základu $z$.
2. Uzel A si zvolí tajné číslo $a$.
3. Uzel A pošle veřejně uzlu B hodnotu $x = z^a mod m$.
4. Uzel B si zvolí tajné číslo $b$.
5. Uzel B pošle uzlu A hodnotu $y = z^b mod m$.
6. Uzel A určí klíč $k = y^a mod m$.
7. Uzel B spočítá klíč $k = x^b mod m$.
8. Klíč $k$ se v uzlech A a B rovná.

* Zabezpečení komunikace na modelu TCP/IP
Nezávislé zabezpečení dat na jednotlivých vrstvách TCP/IP. Každý mechanismus
vyžaduje vytvoření a distribuci klíčů, jejich zabezpečení a ověření. Dosah
zabezpečení závisí na typu vrstvy.

* Transport Layer Security (TLS)
Komunikuje nad transportní vrstvou v TCP paketech. Zapezpečuje přenos dat
protokolů aplikační vrstvy. Zajišťuje důvěrnost, integritu dat a autentizaci
klienta či serveru.

** TLS Handshake
1. Client Hello -- Klient posílá informace o podporovaných šifrách, verzi TLS
2. Server Hello -- Server posílá informace
3. Server Certificate -- Server sděluje informace o certifikátech
4. Server Key Exchange -- Server zahajuje výměnu klíčů
5. Client Certificate -- Klientský certifikát
6. Client Key Exchange -- Klient opětuje výměnu klíčů
7. Client Certificate Verify -- Klient verifikuje certifikát serveru
8. Client Change Cipher Spec -- Klient mění používanou šifru
9. Server Change Cipher Spec -- Server mění používanou šifru
10. Encrypted application data -- Tok šifrovaných aplikačních dat

Pro výměnu klíčů se používý asymetrická kryptografie (Diffie-Hellman, RSA,
Elliptic Curve).

Pro šifrování dat se využívá symetrická kryptografie (je rychlejší).

** Vlastnosti
+ Šifrování: obě strany majá vygenerovaný tajný klíč
+ Autentizace: obě strany si navzájem  vyění a ověří certifikáty
+ Integrita dat: šifrovaná data obsahují hash
+ Šifrovaná data obsahují sekvenční číslo jako prevenci proti přehrání
+ Před zašifrováním mohou být data komprimována

** Omezení TLS
TLS vyžaduje ověřený certifikát serveru, jinak je možný útok Man in the middle.
Nezajišťuje autentizaci odesilatele. Problematická implementace na zařízeních s
omezenými prostředky (IoT). Problém při potřebě monitorovat provoz.

* IPSec
Zabezpečuje přenos pro IPv4 a IPv6. Zajišťuje autentizaci (RSA), šifrování a
integritu dat. Využívá protokoly AH (Authentication Header) a ESP (Encapsulation
Security Payload). Pracuje ve dvou režimech: tunelovacím a transtortním.
Parametry spojení se ukládají do databáze VPN spojení SA (Security Association).

** Protokol AH (Authentication Header)
Chrání datagram IP pomocí kryptografického hashe HMAC-MD nebo HMAC-SHA. Hash se
počítá nad položkami hlavičky, které se během cesty nemění. Zajišťuje
autentizaci, integritu dat a chrání proti přehrání. Nezajišťuje důvěrnost dat.

** Protokol ESP (Encapsulation Security Protocol)
Zapouzdřuje a chrání data IP datagramu. Zajišťuje autentizaci, důvěrnost a
integritu dat, chrání proti přehrátí. Nezajišťuje ochranu vnější hlavičky IP.
Pro šifrování využívá DES, 3DES, AES. Pro autentizaci a integritu dat využívá
HMAC.

* Zabezpečení emailových zpráv pomocí PGP (Pretty Good Privacy)
Zajišťuje integritu dat (MD5), autentizaci odesilatele (RSA) i šifrování (IDEA).
Zpráva je podepsána soukromým klíčem odesilatele. Zpráva je zašifrována tajným
klíčem. Tajný klíč je zašifrován veřejným klíčem příjemce a připojen ke zprávě.
Odesilatel musí mít přístup k veřejnému klíči přijemce pro zašifrování zprávy.
Příjemce musí mít přístup k veřejnému klíči odesilatele pro ověření identity.

* Autentizace zpráv směrovacího protokolu OSPF
Protokol je zapouzdřen v IP. Využívá krypto hash MD5 a sdílený tajný klíč.
Používá sekvenční číslo proti přehrání podepsaného paketu. Vstupem pro
algoritmus MD5 je celý paket OSPF a tajný klíč. Pro OSPFv2 je použít pro
autentizaci algoritmus HMAC-SHA

* Domain Name System
DNS je globální adresář názvů počítačů a dalších identifikátorů síťových
zařízení a služeb

DNS je tvořeno:
1. Jmenným prostorem DNS adres a mapování adres na IP adresy
2. Uložení prostoru jmen DNS a správa tohoto prostoru
3. Přístup k datům v DNS a vyhledávání

DNS je implementováno pomocí hierarchického rozdělení prostoru doménových jmen.
Globální databáze DNS jmen je distribuována na servery. Pro DNS existuje
stejnojmenný protokol, který přenáší data rezolucí DNS a přenosů zón.

Hierarchické uspořádání je ve formě inverzního stromu.

Pro vyhledání doménového jména dle IP adresy je vytvořena speciální doména
~arpa~, která uchovává mapování.

** Správa domén
Globálně je DNS spravováno společností ICANN (Internet Corporation for Assigned
Names and Numbers). ICANN akredituje registrátory dalších doménových jmen (Top
Level Domain):
+ Národní: .cz, .uk, .de
+ Generické: .com, .edu, .org

Domény první úrovně (TLD) spravuje IANA. Registrace národních domén spravuje
národní správce domény. Za ČR je to CZ-NIC.

Domény nižších úrovní spravuje vlastník domény (delegace domén).

** Správa IP adres
IP adresy jsou spravovány a registrovány regionálními registrátory (RIC). Pro
Evropu a část Asie je to RIPE NCC. V jednotlívých státech spravují lokální
registrátoři (LIR) a poskytovatelé připojení. V případě použití Provider
Independent adres může koncový uživatel mít adresu přidělenou přímo od RIR,
která je nezávislá na dalších registrátorech.

** Whois
Služba pro zjišťování vlastníka IP adresy.

** DNS server
Prostor doménových jmen fyzicky uložen na server DNS. Servery DNS obsahují
informace o stromové struktuře i datech. Každý server spravuje jen část prostoru
doménových jmen -- Zónu.

Typy DNS serverů:
+ Primární (Master, primary) -- Obsahuje úplné (autoritativní) záznamy o
  doménách. Pro každou doménu existuje pouze jeden primární nameserver
+ Sekundární (Slave, secondary) -- Uchovává autoritativní kopie dat od
  primárních serverů (přenos zón)
+ Záložní (Caching-only) -- Pouze přijíma dotazy, které předává dalším serverům
  DNS. Ukládá odpovědi do vyrovnávací paměti. Poskytuje neautoritativni
  odpovědi.

** Protokol DNS
Aplikační protokol nad UDP, port 53.

Struktura DNS zprávy je následující:
+ Header
+ Question
+ Answer
+ Authority
+ Additional

** DNS rezoluce
Komunikace DNS je typu klient -- server. Dotazy klienta vyřizuje systémová
rutina OS: Resolver.

Rezoluje je proces vyhledání odpovědi v systému DNS. Využívá stromovou strukturu
jmen a kořenové DNS servery. Rezoluce začíná od kořenových serverů, těch je 13 a
obsahují speciální kořenovou zónu ~hint~.

*** Rekurzivní dotaz
Pokud server nezná odpověď, přepošle dotaz dalším serverům. Rekurzivní dotaz si
ukládá do paměti cache pro další použití.

*** Iterativní dotaz
Server vrátí nejlepší možnou odpověď. Pokud ale nezná přesnou odpověď, vrátí
odkaz na server, který může znát odpověď.

** Přenos zón
Přenos zón je komunikace mezi servery DNS. Využívá se k aktualizaci záznamů na
DNS serverech. Je možný celkový přenos zón (AXFR) nebo přírůstkový přenos
(IXFR), kde sekundární server posílá s výzvou záznam SOA a primární server vrátí
rozdílové změny.

Mechanismus DNS notify upozorňuje o změně zóny.

** Typy záznamů v DNS

*** Start of Authority (SOA)
Poskytuje základní informace o zóně. Každá zóna má právě jeden SOA.

Obsahuje:
+ Název primárního serveru a emailovou adresu správce
+ Sériové číslo identifikující změnu záznamu
+ Interval pro zjišťování změny (na sekundárních serverech)
+ Doba, po které se server pokusí aktualizovat zónu v případě ne)spěšného přenosu
+ Doba platnosti dat na sekundátním serveru
+ Implicitní doba TTL záznamů v zónovém souboru dané zóny

*** Name Server (NS)
Určuje autoritativní servery pro danou zónu. Slouží k budování hierarchické
struktury DNS systému. Pro TLD jsou autoritativní servery uvedeny v seznamu
root.zone na IANA.

*** A
Přímé mapování doménových adres na IPv4 adresy.

*** AAAA
Přímé mapování doménových jmen na IPv6 adresy.

*** Mail Exchange (MX)
Mapuje adresy poštovních serverů. Přesměrovává poštu pro danou doménu na
konkrétní poštovní server. Lze mít více serverů s různou prioritou.

*** Canonical Name (CNAME)
Mapuje alias zařízení na kanonické jméno počítače. Síťové zařízení smí mít více
aliasů. Alias ale nesmí stát na pravé staně záznamu.

*** Domain Name Pointer (PTR)
Mapuje IPv4 a IPv6 adresu zpětně na doménovou adresu. Využívá speciální podstrom
~in-addr.arpa~ a ~ip6.arpa~.

*** Naming Autority Pointer (NAPTR)
Mapuje řetězce na data. Podporuje dynamickou konfiguraci systému. Používá
regulární výrazy pro dynamické záznamy v DNS. Příklad je lokaližace VoIP
serveru.

*** Service Record (SRV)
Loaklizuje služby (například SIP, XMPP ...). Slouží také pro load balancing nebo
zálohování.

*** Text (TXT)
Obsahuje textová data. Dodatečné informace o doméně, serveru, správci a podobně.
Slouží také k ověření mailových serverů nebo ověření vlastnictví domény pro
Google Apps.

** Zabezpečení systému DNS
DNS je distribuovaná veřejná služba, která je potřeba k jakékoliv komunikaci na
internetu. Je potřeba zajistit zejména integritu dat a autentizaci zdroje dat.

*** Bezpečnostní rizika
Podvržené odpovědi mohou vracet neautorizované odpovědi na dotaz klienta.
Podvržená data v paměti cache mohou zneplatnit data pro mnoho klientů. Při DoS
útocích může dojít k blokování jakékoliv DNS rezoluce.

*** DNSSEC
Zajišťuje integritu a autentizaci dat v DNS. Zabezpečuje data DNS pomocí
asymetrické kryptografie (podepisování). Záznamy v DNS zónách jsou podepsány
pomocí Zone Signing Key (ZSK). Klíče pro podepisování záznamů jsou dále
podepsány pomocí Key Signing Key (KSK).

Při použíti DNSSEC nedochází k šifrování DNS provozu.

DNSSEC definuje nové záznamy DNS:
+ DNSKEY: Veřejný klíč pro ověření podpisů
+ RRSIG: Podpis daného záznamu
+ NSEC, NSEC3: Odkaz na další záznam při dotazu na neexistující doménu
+ DS: Záznam pro ověření záznamu DNSKEY, uležen v nadřazené doméně.

Při použití DNSSEC se využívá Chain of Trust. Jední se o mechanismus ověření
pravosti klíče domény nadřazenou doménou. Pro každou zónu existuje pár klíčů
(veřejný -- tajný). Zabezpečení významně zvyšuje velikost paketu DNS.

** Monitorování provozu DNS
Problémem DNS je velká míra informací vztahujících se k odesilateli. IP adresa
lze lokalizovat. Podle meta informací lze zjistit lokální konfiguraci DNS
serveru, podporu IPv6... Informace získané z dotazu DNS napovídají, co uživatel
požaduje za služby, jaké stránky navštěvuje...

DNS byl původně navržen jako veřejná služba přenášející otevřená data.

Lze použít technologii DNS over TLS (DoT), kdy je DNS dotaz šifrován a je viditelný
pouze vybranému DNS serveru. Problém je při výběru serveru a nastavéní
šifrování.

Další možností je DNS over HTTPS (DoH). Dotazy jsou posílány serveru DNS, kterů
je předkonfigurován ve webovém prohlížeči.

Ani jedna z těchto metod neřeší soukromí, pouze problém přesouvají. DNS server
bude vždy vidět rozšifrované DNS dotazy (problém při použití například Google DNS).
